{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport User from '../../../models/userModel';\nimport validate from '../../../utils/validate';\nimport bcrypt from 'bcrypt';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"POST\":\n      register(req, res);\n\n    default:\n      return null;\n  }\n});\n\nconst register = async (req, res) => {\n  try {\n    // Tangkap request dari form\n    const {\n      name,\n      email,\n      password,\n      password2\n    } = req.body; // Validasi ulang\n\n    const errMsg = validate(req.body);\n    if (errMsg) return res.status(400).json({\n      err: errMsg\n    }); // Cek Email\n\n    const user = await User.findOne({\n      email\n    });\n    if (user) return res.status(400).json({\n      err: 'this Email has already exists'\n    });\n    const passwordHash = await bcrypt.hash(password, 12);\n    console.log(passwordHash); // // Buat data\n    // const newUser = new User({\n    //     name, email,\n    //     password: passwordHash\n    // })\n    // // Save data\n    // await newUser.save()\n    // Kirimkan response\n\n    res.json({\n      msg: 'Register Success'\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/zuares/Documents/Project/ZCommerce/pages/api/auth/register.js"],"names":["connectDB","User","validate","bcrypt","req","res","method","register","name","email","password","password2","body","errMsg","status","json","err","user","findOne","passwordHash","hash","console","log","msg","message"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,IAAP,MAAiB,2BAAjB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAGAH,SAAS;AAET,gBAAe,OAAOI,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,UAAQD,GAAG,CAACE,MAAZ;AACI,SAAK,MAAL;AACIC,MAAAA,QAAQ,CAACH,GAAD,EAAMC,GAAN,CAAR;;AACJ;AACI,aAAO,IAAP;AAJR;AAMH,CAPD;;AASA,MAAME,QAAQ,GAAG,OAAOH,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAI;AACA;AACA,UAAM;AAAEG,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA,QAAf;AAAyBC,MAAAA;AAAzB,QAAuCP,GAAG,CAACQ,IAAjD,CAFA,CAIA;;AACA,UAAMC,MAAM,GAAGX,QAAQ,CAACE,GAAG,CAACQ,IAAL,CAAvB;AACA,QAAIC,MAAJ,EACI,OAAOR,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,GAAG,EAAEH;AAAP,KAArB,CAAP,CAPJ,CASA;;AACA,UAAMI,IAAI,GAAG,MAAMhB,IAAI,CAACiB,OAAL,CAAa;AAAET,MAAAA;AAAF,KAAb,CAAnB;AACA,QAAIQ,IAAJ,EACI,OAAOZ,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAArB,CAAP;AAEJ,UAAMG,YAAY,GAAG,MAAMhB,MAAM,CAACiB,IAAP,CAAYV,QAAZ,EAAsB,EAAtB,CAA3B;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ,EAfA,CAgBA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACAd,IAAAA,GAAG,CAACU,IAAJ,CAAS;AACLQ,MAAAA,GAAG,EAAE;AADA,KAAT;AAKH,GA/BD,CA+BE,OAAOP,GAAP,EAAY;AACV,WAAOX,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,GAAG,EAAEA,GAAG,CAACQ;AAAX,KAArB,CAAP;AACH;AACJ,CAnCD","sourcesContent":["import connectDB from '../../../utils/connectDB'\nimport User from '../../../models/userModel'\nimport validate from '../../../utils/validate'\nimport bcrypt from 'bcrypt'\n\n\nconnectDB()\n\nexport default async (req, res) => {\n    switch (req.method) {\n        case \"POST\":\n            register(req, res)\n        default:\n            return null\n    }\n}\n\nconst register = async (req, res) => {\n    try {\n        // Tangkap request dari form\n        const { name, email, password, password2 } = req.body\n\n        // Validasi ulang\n        const errMsg = validate(req.body)\n        if (errMsg)\n            return res.status(400).json({ err: errMsg })\n\n        // Cek Email\n        const user = await User.findOne({ email })\n        if (user)\n            return res.status(400).json({ err: 'this Email has already exists' })\n\n        const passwordHash = await bcrypt.hash(password, 12)\n        console.log(passwordHash);\n        // // Buat data\n        // const newUser = new User({\n        //     name, email,\n        //     password: passwordHash\n        // })\n\n        // // Save data\n        // await newUser.save()\n\n        // Kirimkan response\n        res.json({\n            msg: 'Register Success'\n        })\n\n\n    } catch (err) {\n        return res.status(500).json({ err: err.message })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}