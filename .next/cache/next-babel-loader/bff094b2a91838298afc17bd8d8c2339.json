{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Order from '../../../models/orderModel';\nimport Product from '../../../models/productModel';\nimport auth from '../../../middleware/auth';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"PATCH\":\n      await paymentOrder(req, res);\n      break;\n  }\n});\n\nconst paymentOrder = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    const {\n      id\n    } = req.query;\n    await Order.findOneAndUpdate({\n      _id: id\n    }, {\n      paid: true,\n      dateOfPayment: new Date().toISOString()\n    });\n  } catch (error) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst getOrders = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    let orders;\n\n    if (result.role !== \"admin\") {\n      orders = await Order.find({\n        user: result.id\n      }).populate(\"user\", \"-password\");\n    } else {\n      orders = await Order.find().populate(\"user\", \"-password\");\n    }\n\n    res.json({\n      orders\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst createOrder = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    const {\n      address,\n      mobile,\n      cart,\n      total\n    } = req.body;\n    const newOrder = new Order({\n      user: result.id,\n      address,\n      mobile,\n      cart,\n      total\n    });\n    cart.filter(item => {\n      return sold(item._id, item.quantity, item.inStock, item.sold);\n    });\n    newOrder.save();\n    return res.json({\n      msg: 'Payment Success',\n      newOrder\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst sold = async (id, quantity, oldInStock, oldStock) => {\n  await Product.findOneAndUpdate({\n    _id: id\n  }, {\n    inStock: oldInStock - quantity,\n    sold: quantity + oldStock\n  });\n};","map":{"version":3,"sources":["/home/zuares/Documents/Project/ZCommerce/pages/api/order/index.js"],"names":["connectDB","Order","Product","auth","req","res","method","paymentOrder","result","id","query","findOneAndUpdate","_id","paid","dateOfPayment","Date","toISOString","error","status","json","err","message","getOrders","orders","role","find","user","populate","createOrder","address","mobile","cart","total","body","newOrder","filter","item","sold","quantity","inStock","save","msg","oldInStock","oldStock"],"mappings":"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","sourcesContent":["import connectDB from '../../../utils/connectDB'\nimport Order from '../../../models/orderModel'\nimport Product from '../../../models/productModel'\nimport auth from '../../../middleware/auth'\n\nconnectDB()\n\nexport default async (req, res) => {\n    switch (req.method) {\n        case \"PATCH\":\n            await paymentOrder(req, res)\n            break;\n    }\n}\n\nconst paymentOrder = async (req, res) => {\n    try {\n        const result = await auth(req, res)\n        const { id } = req.query\n\n        await Order.findOneAndUpdate({ _id: id }, {\n            paid: true, dateOfPayment: new Date().toISOString()\n        })\n\n    } catch (error) {\n        return res.status(500).json({ err: err.message })\n    }\n}\nconst getOrders = async (req, res) => {\n    try {\n        const result = await auth(req, res)\n\n        let orders;\n        if (result.role !== \"admin\") {\n            orders = await Order.find({ user: result.id }).populate(\"user\", \"-password\")\n        } else {\n            orders = await Order.find().populate(\"user\", \"-password\")\n        }\n        res.json({ orders })\n    } catch (err) {\n        return res.status(500).json({ err: err.message })\n    }\n}\n\nconst createOrder = async (req, res) => {\n    try {\n        const result = await auth(req, res)\n        const { address, mobile, cart, total } = req.body\n        const newOrder = new Order({\n            user: result.id, address, mobile, cart, total\n        })\n        cart.filter(item => {\n            return sold(item._id, item.quantity, item.inStock, item.sold)\n        })\n\n        newOrder.save()\n        return res.json({\n            msg: 'Payment Success',\n            newOrder\n        })\n    } catch (err) {\n        return res.status(500).json({ err: err.message })\n    }\n}\n\nconst sold = async (id, quantity, oldInStock, oldStock) => {\n    await Product.findOneAndUpdate({ _id: id }, {\n        inStock: oldInStock - quantity,\n        sold: quantity + oldStock\n    })\n}"]},"metadata":{},"sourceType":"module"}