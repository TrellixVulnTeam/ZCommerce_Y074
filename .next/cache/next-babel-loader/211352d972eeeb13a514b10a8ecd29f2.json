{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nexport var ImageUpload = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(img) {\n    var imgArr, _iterator, _step, item, formData, res, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            imgArr = [];\n            _iterator = _createForOfIteratorHelper(img);\n            _context.prev = 2;\n\n            _iterator.s();\n\n          case 4:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 19;\n              break;\n            }\n\n            item = _step.value;\n            formData = new FormData();\n            formData.append(\"file\", item);\n            formData.append(\"upload_preset\", process.env.CLOUD_UPDATE_PRESET);\n            formData.append(\"cloud_name\", process.env.CLOUD_NAME);\n            _context.next = 12;\n            return fetch(process.env.CLOUD_API, {\n              method: \"POST\",\n              body: formData\n            });\n\n          case 12:\n            res = _context.sent;\n            _context.next = 15;\n            return res.json();\n\n          case 15:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 17:\n            _context.next = 4;\n            break;\n\n          case 19:\n            _context.next = 24;\n            break;\n\n          case 21:\n            _context.prev = 21;\n            _context.t0 = _context[\"catch\"](2);\n\n            _iterator.e(_context.t0);\n\n          case 24:\n            _context.prev = 24;\n\n            _iterator.f();\n\n            return _context.finish(24);\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 21, 24, 27]]);\n  }));\n\n  return function ImageUpload(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n_c = ImageUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"sources":["/home/zuares/Documents/Project/ZCommerce/utils/ImageUpload.js"],"names":["ImageUpload","img","imgArr","item","formData","FormData","append","process","env","CLOUD_UPDATE_PRESET","CLOUD_NAME","fetch","CLOUD_API","method","body","res","json","data"],"mappings":";;;;;;;;;AACA,OAAO,IAAMA,WAAW;AAAA,sEAAG,iBAAOC,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnBC,YAAAA,MADmB,GACV,EADU;AAAA,mDAEJD,GAFI;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEZE,YAAAA,IAFY;AAGbC,YAAAA,QAHa,GAGF,IAAIC,QAAJ,EAHE;AAInBD,YAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBH,IAAxB;AACAC,YAAAA,QAAQ,CAACE,MAAT,CAAgB,eAAhB,EAAiCC,OAAO,CAACC,GAAR,CAAYC,mBAA7C;AACAL,YAAAA,QAAQ,CAACE,MAAT,CAAgB,YAAhB,EAA8BC,OAAO,CAACC,GAAR,CAAYE,UAA1C;AANmB;AAAA,mBAQDC,KAAK,CAACJ,OAAO,CAACC,GAAR,CAAYI,SAAb,EAAwB;AAC3CC,cAAAA,MAAM,EAAE,MADmC;AAE3CC,cAAAA,IAAI,EAAEV;AAFqC,aAAxB,CARJ;;AAAA;AAQbW,YAAAA,GARa;AAAA;AAAA,mBAaAA,GAAG,CAACC,IAAJ,EAbA;;AAAA;AAabC,YAAAA,IAba;AAAA,6CAcZA,IAdY;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXjB,WAAW;AAAA;AAAA;AAAA,GAAjB;KAAMA,W","sourcesContent":["\nexport const ImageUpload = async (img) => {\n    let imgArr = []\n    for (const item of img) {\n        const formData = new FormData()\n        formData.append(\"file\", item)\n        formData.append(\"upload_preset\", process.env.CLOUD_UPDATE_PRESET)\n        formData.append(\"cloud_name\", process.env.CLOUD_NAME)\n\n        const res = await fetch(process.env.CLOUD_API, {\n            method: \"POST\",\n            body: formData\n        })\n\n        const data = await res.json()\n        return data\n        // console.log(data);\n        // imgArr.push({ public_id: data.public_id, url: data.secure_url })\n    }\n    // return imgArr\n}\n"]},"metadata":{},"sourceType":"module"}