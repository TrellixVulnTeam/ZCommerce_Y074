{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Order from '../../../models/orderModel';\nimport Product from '../../../models/productModel';\nimport auth from '../../../middleware/auth';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"POST\":\n      await createOrder(req, res);\n\n    case \"GET\":\n      await getOrders(req, res);\n\n    default:\n      break;\n  }\n});\n\nconst getOrders = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    let orders;\n\n    if (result.role !== \"admin\") {\n      orders = await Order.find({\n        user: result.id\n      }).populate(\"users\", \"-password\");\n    } else {\n      orders = await Order.find().populate(\"users\", \"-password\");\n    }\n\n    res.json({\n      orders\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst createOrder = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    const {\n      address,\n      mobile,\n      cart,\n      total\n    } = req.body;\n    console.log(req.body); // const newOrder = new Order({\n    //     user: result.id, address, mobile, cart, total\n    // })\n    // cart.filter(item => {\n    //     return sold(item._id, item.quantity, item.inStock, item.sold)\n    // })\n    // newOrder.save()\n    // return res.json({\n    //     msg: 'Payment Success',\n    //     newOrder\n    // })\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst sold = async (id, quantity, oldInStock, oldStock) => {\n  await Product.findOneAndUpdate({\n    _id: id\n  }, {\n    inStock: oldInStock - quantity,\n    sold: quantity + oldStock\n  });\n};","map":{"version":3,"sources":["/home/zuares/Documents/Project/ZCommerce/pages/api/order/index.js"],"names":["connectDB","Order","Product","auth","req","res","method","createOrder","getOrders","result","orders","role","find","user","id","populate","json","err","status","message","address","mobile","cart","total","body","console","log","sold","quantity","oldInStock","oldStock","findOneAndUpdate","_id","inStock"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,KAAP,MAAkB,4BAAlB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AAEAH,SAAS;AAET,gBAAe,OAAOI,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,UAAQD,GAAG,CAACE,MAAZ;AACI,SAAK,MAAL;AACI,YAAMC,WAAW,CAACH,GAAD,EAAMC,GAAN,CAAjB;;AACJ,SAAK,KAAL;AACI,YAAMG,SAAS,CAACJ,GAAD,EAAMC,GAAN,CAAf;;AACJ;AACI;AANR;AAQH,CATD;;AAWA,MAAMG,SAAS,GAAG,OAAOJ,GAAP,EAAYC,GAAZ,KAAoB;AAClC,MAAI;AACA,UAAMI,MAAM,GAAG,MAAMN,IAAI,CAACC,GAAD,EAAMC,GAAN,CAAzB;AAEA,QAAIK,MAAJ;;AACA,QAAID,MAAM,CAACE,IAAP,KAAgB,OAApB,EAA6B;AACzBD,MAAAA,MAAM,GAAG,MAAMT,KAAK,CAACW,IAAN,CAAW;AAAEC,QAAAA,IAAI,EAAEJ,MAAM,CAACK;AAAf,OAAX,EAAgCC,QAAhC,CAAyC,OAAzC,EAAkD,WAAlD,CAAf;AACH,KAFD,MAEO;AACHL,MAAAA,MAAM,GAAG,MAAMT,KAAK,CAACW,IAAN,GAAaG,QAAb,CAAsB,OAAtB,EAA+B,WAA/B,CAAf;AACH;;AACDV,IAAAA,GAAG,CAACW,IAAJ,CAAS;AAAEN,MAAAA;AAAF,KAAT;AACH,GAVD,CAUE,OAAOO,GAAP,EAAY;AACV,WAAOZ,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAAEC,MAAAA,GAAG,EAAEA,GAAG,CAACE;AAAX,KAArB,CAAP;AACH;AACJ,CAdD;;AAgBA,MAAMZ,WAAW,GAAG,OAAOH,GAAP,EAAYC,GAAZ,KAAoB;AACpC,MAAI;AACA,UAAMI,MAAM,GAAG,MAAMN,IAAI,CAACC,GAAD,EAAMC,GAAN,CAAzB;AACA,UAAM;AAAEe,MAAAA,OAAF;AAAWC,MAAAA,MAAX;AAAmBC,MAAAA,IAAnB;AAAyBC,MAAAA;AAAzB,QAAmCnB,GAAG,CAACoB,IAA7C;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYtB,GAAG,CAACoB,IAAhB,EAHA,CAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEH,GAjBD,CAiBE,OAAOP,GAAP,EAAY;AACV,WAAOZ,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAAEC,MAAAA,GAAG,EAAEA,GAAG,CAACE;AAAX,KAArB,CAAP;AACH;AACJ,CArBD;;AAuBA,MAAMQ,IAAI,GAAG,OAAOb,EAAP,EAAWc,QAAX,EAAqBC,UAArB,EAAiCC,QAAjC,KAA8C;AACvD,QAAM5B,OAAO,CAAC6B,gBAAR,CAAyB;AAAEC,IAAAA,GAAG,EAAElB;AAAP,GAAzB,EAAsC;AACxCmB,IAAAA,OAAO,EAAEJ,UAAU,GAAGD,QADkB;AAExCD,IAAAA,IAAI,EAAEC,QAAQ,GAAGE;AAFuB,GAAtC,CAAN;AAIH,CALD","sourcesContent":["import connectDB from '../../../utils/connectDB'\nimport Order from '../../../models/orderModel'\nimport Product from '../../../models/productModel'\nimport auth from '../../../middleware/auth'\n\nconnectDB()\n\nexport default async (req, res) => {\n    switch (req.method) {\n        case \"POST\":\n            await createOrder(req, res)\n        case \"GET\":\n            await getOrders(req, res)\n        default:\n            break;\n    }\n}\n\nconst getOrders = async (req, res) => {\n    try {\n        const result = await auth(req, res)\n\n        let orders;\n        if (result.role !== \"admin\") {\n            orders = await Order.find({ user: result.id }).populate(\"users\", \"-password\")\n        } else {\n            orders = await Order.find().populate(\"users\", \"-password\")\n        }\n        res.json({ orders })\n    } catch (err) {\n        return res.status(500).json({ err: err.message })\n    }\n}\n\nconst createOrder = async (req, res) => {\n    try {\n        const result = await auth(req, res)\n        const { address, mobile, cart, total } = req.body\n        console.log(req.body);\n        // const newOrder = new Order({\n        //     user: result.id, address, mobile, cart, total\n        // })\n        // cart.filter(item => {\n        //     return sold(item._id, item.quantity, item.inStock, item.sold)\n        // })\n\n        // newOrder.save()\n        // return res.json({\n        //     msg: 'Payment Success',\n        //     newOrder\n        // })\n\n    } catch (err) {\n        return res.status(500).json({ err: err.message })\n    }\n}\n\nconst sold = async (id, quantity, oldInStock, oldStock) => {\n    await Product.findOneAndUpdate({ _id: id }, {\n        inStock: oldInStock - quantity,\n        sold: quantity + oldStock\n    })\n}"]},"metadata":{},"sourceType":"module"}