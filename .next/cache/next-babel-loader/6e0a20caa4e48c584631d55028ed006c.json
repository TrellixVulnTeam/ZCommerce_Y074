{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Order from '../../../models/orderModel';\nimport Product from '../../../models/productModel';\nimport auth from '../../../middleware/auth';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"POST\":\n      await createOrder(req, res);\n\n    case \"GET\":\n      await getOrders(req, res);\n\n    default:\n      break;\n  }\n});\n\nconst getOrders = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    let orders;\n\n    if (result.role !== \"admin\") {\n      orders = await Order.find({\n        user: result.id\n      }).populate(\"user\", \"-password\");\n    } else {\n      orders = await Order.find();\n    }\n\n    res.json({\n      order\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst createOrder = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    const {\n      address,\n      mobile,\n      cart,\n      total\n    } = req.body;\n    const newOrder = new Order({\n      user: result.id,\n      address,\n      mobile,\n      cart,\n      total\n    });\n    cart.filter(item => {\n      return sold(item._id, item.quantity, item.inStock, item.sold);\n    });\n    newOrder.save();\n    return res.json({\n      msg: 'Payment Success',\n      newOrder\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst sold = async (id, quantity, oldInStock, oldStock) => {\n  await Product.findOneAndUpdate({\n    _id: id\n  }, {\n    inStock: oldInStock - quantity,\n    sold: quantity + oldStock\n  });\n};","map":{"version":3,"sources":["/home/zuares/Documents/Project/ZCommerce/pages/api/order/index.js"],"names":["connectDB","Order","Product","auth","req","res","method","createOrder","getOrders","result","orders","role","find","user","id","populate","json","order","err","status","message","address","mobile","cart","total","body","newOrder","filter","item","sold","_id","quantity","inStock","save","msg","oldInStock","oldStock","findOneAndUpdate"],"mappings":"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","sourcesContent":["import connectDB from '../../../utils/connectDB'\nimport Order from '../../../models/orderModel'\nimport Product from '../../../models/productModel'\nimport auth from '../../../middleware/auth'\n\nconnectDB()\n\nexport default async (req, res) => {\n    switch (req.method) {\n        case \"POST\":\n            await createOrder(req, res)\n        case \"GET\":\n            await getOrders(req, res)\n        default:\n            break;\n    }\n}\n\nconst getOrders = async (req, res) => {\n    try {\n        const result = await auth(req, res)\n\n        let orders;\n        if (result.role !== \"admin\") {\n            orders = await Order.find({ user: result.id }).populate(\"user\", \"-password\")\n        } else {\n            orders = await Order.find()\n        }\n        res.json({ order })\n    } catch (err) {\n        return res.status(500).json({ err: err.message })\n    }\n}\n\nconst createOrder = async (req, res) => {\n    try {\n        const result = await auth(req, res)\n        const { address, mobile, cart, total } = req.body\n        const newOrder = new Order({\n            user: result.id, address, mobile, cart, total\n        })\n        cart.filter(item => {\n            return sold(item._id, item.quantity, item.inStock, item.sold)\n        })\n\n        newOrder.save()\n        return res.json({\n            msg: 'Payment Success',\n            newOrder\n        })\n\n    } catch (err) {\n        return res.status(500).json({ err: err.message })\n    }\n}\n\nconst sold = async (id, quantity, oldInStock, oldStock) => {\n    await Product.findOneAndUpdate({ _id: id }, {\n        inStock: oldInStock - quantity,\n        sold: quantity + oldStock\n    })\n}"]},"metadata":{},"sourceType":"module"}